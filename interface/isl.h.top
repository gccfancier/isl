/// These are automatically generated C++ bindings for isl.
///
/// isl is a library for computing with integer sets and maps described by
/// Presburger formulas. On top of this, isl provides various tools for
/// polyhedral compilation, ranging from dependence analysis over scheduling
/// to AST generation.

#ifndef ISL_CPP_NOEXCEPTIONS
#define ISL_CPP_NOEXCEPTIONS

#include <isl/aff.h>
#include <isl/ast_build.h>
#include <isl/flow.h>
#include <isl/ilp.h>
#include <isl/map.h>
#include <isl/schedule.h>
#include <isl/schedule_node.h>
#include <isl/set.h>
#include <isl/union_map.h>
#include <isl/union_set.h>
#include <isl/val.h>
#include <isl/constraint.h>

#include <functional>
#include <string>

namespace isl {
inline namespace noexceptions {

#define ISLPP_STRINGIZE_(X) #X
#define ISLPP_STRINGIZE(X) ISLPP_STRINGIZE_(X)

#define ISLPP_ASSERT(test, message)                          \
  do {                                                       \
    if (test)                                                \
      break;                                                 \
    fputs("Assertion \"" #test "\" failed at " __FILE__      \
      ":" ISLPP_STRINGIZE(__LINE__) "\n  " message "\n",     \
      stderr);                                               \
  } while (0)

class boolean {
private:
  isl_bool val;

  friend isl::boolean manage(isl_bool val);
  boolean(isl_bool val): val(val) {}
public:
  boolean()
      : val(isl_bool_error) {}

  /* implicit */ boolean(bool val)
      : val(val ? isl_bool_true : isl_bool_false) {}

  bool is_error() const { return val == isl_bool_error; }
  bool is_false() const { return val == isl_bool_false; }
  bool is_true() const { return val == isl_bool_true; }

  explicit operator bool() const {
    ISLPP_ASSERT(!is_error(), "IMPLEMENTATION ERROR: Unhandled error state");
    return is_true();
  }

  boolean operator!() const {
    if (is_error())
      return *this;
    return !is_true();
  }
};

inline isl::boolean manage(isl_bool val) {
  return isl::boolean(val);
}

class ctx {
  isl_ctx *ptr;
public:
  /* implicit */ ctx(isl_ctx *ctx)
      : ptr(ctx) {}
  isl_ctx *release() {
    auto tmp = ptr;
    ptr = nullptr;
    return tmp;
  }
  isl_ctx *get() {
    return ptr;
  }
};


class id;

inline isl::id manage(__isl_take isl_id *ptr);

template <typename T>
struct isl_id_user {
	T *usr;
	std::function<void (T *)> deleter;
};

template <typename T>
static void *allocate_isl_id_user(T *u, std::function<void (T *)> d) {
	isl_id_user<T> *iiu = new isl_id_user<T>;
	iiu->usr = u;
	iiu->deleter = d;
	return iiu;
}

template <typename T>
struct DeleteIslId {
  static void delete_isl_id_user(void *v) {
    auto iiu = static_cast<isl_id_user<T> *>(v);
  	iiu->deleter(iiu->usr);
  	delete iiu;
  }
};

template <typename T>
std::function<void (T *)> make_default_deleter() {
  return [](T *t) {
    delete t;
  };
}

class id {
private:
  friend inline isl::id manage(__isl_take isl_id *ptr);

  isl_id *ptr = nullptr;

  inline explicit id(__isl_take isl_id *ptr);

public:
  inline /* implicit */ id();
  inline /* implicit */ id(const isl::id &obj);

  template <typename T>
  explicit id(isl::ctx ctx, const std::string &str, T *obj,
              std::function<void (T *)> deleter = make_default_deleter<T>())
  {
    void *usr = allocate_isl_id_user(obj, deleter);
    auto res = isl_id_alloc(ctx.release(), str.c_str(), usr);
    res = isl_id_set_free_user(res, &DeleteIslId<T>::delete_isl_id_user);
    ptr = res;
  }

  explicit id(isl::ctx ctx, const std::string &str) {
    auto res = isl_id_alloc(ctx.release(), str.c_str(), NULL);
    ptr = res;
  }

  std::string get_name() const {
    const char *Tmp = isl_id_get_name(get());
    if (!Tmp)
      return "";
    std::string S(Tmp);
    return S;
  }

  template <typename T>
  T *get_user() const {
    auto iiu = static_cast<isl_id_user<T> *>(isl_id_get_user(ptr));
    return iiu->usr;
  }

  //inline explicit id(isl::ctx ctx, const std::string &str, std::shared_ptr<void> obj);
  inline isl::id &operator=(isl::id obj);
  inline ~id();
  inline __isl_give isl_id *copy() const &;
  inline __isl_give isl_id *copy() && = delete;
  inline __isl_keep isl_id *get() const;
  inline __isl_give isl_id *release();
  inline __isl_keep isl_id *keep() const;
  inline __isl_give isl_id *take();
  inline explicit operator bool() const;
  inline isl::ctx get_ctx() const;
  inline bool is_null() const;
  inline std::string to_str() const;

  typedef isl_id* isl_ptr_t;
};

// implementations for isl::id
isl::id manage(__isl_take isl_id *ptr) {
  return id(ptr);
}

id::id()
    : ptr(nullptr) {}

id::id(const isl::id &obj)
    : ptr(obj.copy()) {}

id::id(__isl_take isl_id *ptr)
    : ptr(ptr) {}

id &id::operator=(isl::id obj) {
  std::swap(this->ptr, obj.ptr);
  return *this;
}

id::~id() {
  if (ptr)
    isl_id_free(ptr);
}

__isl_give isl_id *id::copy() const & {
  return isl_id_copy(ptr);
}

__isl_keep isl_id *id::get() const {
  return ptr;
}

__isl_give isl_id *id::release() {
  isl_id *tmp = ptr;
  ptr = nullptr;
  return tmp;
}

__isl_keep isl_id *id::keep() const {
  return get();
}

__isl_give isl_id *id::take() {
  return release();
}

id::operator bool() const {
  return !is_null();
}

isl::ctx id::get_ctx() const {
  return isl::ctx(isl_id_get_ctx(ptr));
}

bool id::is_null() const {
  return ptr == nullptr;
}

inline std::ostream& operator<<(std::ostream& os, const id& C) {
  os << C.to_str();
  return os;
}


std::string id::to_str() const {
  char *Tmp = isl_id_to_str(get());
  if (!Tmp)
    return "";
  std::string S(Tmp);
  free(Tmp);
  return S;
}


enum class stat {
  ok = isl_stat_ok,
  error = isl_stat_error
};

enum class dim_type {
  cst = isl_dim_cst,
  param = isl_dim_param,
  in = isl_dim_in,
  out = isl_dim_out,
  set = isl_dim_set,
  div = isl_dim_div,
  all = isl_dim_all
};

enum class ast_op_type {
	error = isl_ast_op_error,
	_and = isl_ast_op_and,
	and_then = isl_ast_op_and_then,
	_or = isl_ast_op_or,
	or_else = isl_ast_op_or_else,
	max = isl_ast_op_max,
	min = isl_ast_op_min,
	minus = isl_ast_op_minus,
	add = isl_ast_op_add,
	sub = isl_ast_op_sub,
	mul = isl_ast_op_mul,
	div = isl_ast_op_div,
	fdiv_q = isl_ast_op_fdiv_q,	/* Round towards -infty */
	pdiv_q = isl_ast_op_pdiv_q,	/* Dividend is non-negative */
	pdiv_r = isl_ast_op_pdiv_r,	/* Dividend is non-negative */
	zdiv_r = isl_ast_op_zdiv_r,	/* Result only compared against zero */
	cond = isl_ast_op_cond,
	select = isl_ast_op_select,
	eq = isl_ast_op_eq,
	le = isl_ast_op_le,
	lt = isl_ast_op_lt,
	ge = isl_ast_op_ge,
	gt = isl_ast_op_gt,
	call = isl_ast_op_call,
	access = isl_ast_op_access,
	member = isl_ast_op_member,
	address_of = isl_ast_op_address_of
};

enum class ast_node_type {
	error = isl_ast_node_error,
	_for = isl_ast_node_for,
	_if = isl_ast_node_if,
	block = isl_ast_node_block,
	mark = isl_ast_node_mark,
	user = isl_ast_node_user
};

enum class ast_loop_type {
	error = isl_ast_loop_error,
	_default = isl_ast_loop_default,
	atomic = isl_ast_loop_atomic,
	unroll = isl_ast_loop_unroll,
	separate = isl_ast_loop_separate
};
}
} // namespace isl
